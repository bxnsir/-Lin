#include <stdio.h> // 引入標準輸入輸出函式庫
#include <string.h> // 引入字串處理函式庫，這樣才能使用 strlen 計算字串長度。 

int main()
{
    char binary[11]; // 用於儲存使用者輸入的二進位字串 ， 由於設定字元容量為 11 ， 因此最高可輸入十個數值 (第十一個字元為 \0 這個隱藏的字串終止符) 。 
    int decimal = 0; // 先宣告一個整數變數名 decimal 用來進行初始化後儲存 0 ， 以獲取記憶體位置，後續將用於儲存十進位結果來取代原先的 0 。 
    int i = 0;       // 先宣告一個整數變數名為 i  用進行初始化後儲存 0 以獲取記憶體位置 ， 後續將挪用充當迴圈 for 的計數器 。
    printf("Please enter a binary string within 10 characters: ");
    scanf("%s", binary); // 在此輸入十個數值以內的二進位字串 ，並存入 binary 之中 ，由於 binary 是字串型態 ， 本身就可是別記憶體位址， 因 此不需要以 & 來標記記憶體地址。 

    // 檢查輸入的二進位字串是否有效
    int length = strlen(binary);  // strlen 會計算  binary 中儲存了幾個字元，例如: 0101 就會計算為 4 個字元，並將結果回傳一個整數儲存在 length 裡面。 
    for (i = 0; i < length; i++)  /* 確認 strlen 計算 length 中的字元長度是否正確，基於迴圈規則再次賦予 i = 0 ，使 i 的 0 用來與 length 中儲存的字元進行  < 小於計算 
       ，每迴圈運算完一次 i的 0 就會增進+1，依序直至 i的數值等同 length 的數值為止，最終迴圈的次數必須與 length 中的數值相同  */
    { 
        if (binary[i] != '0' && binary[i] != '1') /* 此處的 binary[i] 為索引運算子 ，這裡的 i 會取得上段 i++ 得出的數值，讓索引運算子找到對應的字元 
    並與 != '0' 以及 != '1' 這個 不等於運算子 進行判斷與 0 及 1 是否不相等 ，並最終再由  && 邏輯 AND 運算 來確認，
	倘若 兩者結果是不同的那 && 就會取得 假 (false) ， if 內的程式碼就不會被啟動，並持續迴圈到  binary 中的每一個字元檢查都得到了  假 (false)的結果 ，進入下一步 ， 
	而如果 兩者結果是相同的的那 && 就會取得 真（true） ， 這樣 if 內的程式碼就會被啟動， 最終回傳 return 1 進行程式碼報錯 ， 並停止程式運作， 
    由於 binary 要求的是輸入 二進制 ，因此 binary 中存入的一定是 0 與 1 ，這樣不論是第幾位的字元一定都 與 != '0' 以及 != '1' 至少其中一個是有等於，
	可如果錯誤輸入了0與1以外的數值，例如 5 ，那最終與  != '0' 以及 != '1'  進行計算，結果都將是 不等於 ， 導致 && 判斷會得出 真（true）的結果，達成執行 if 內 程式碼的條件。 
		 */
		 
        {
            printf("Invalid input! Please enter a valid binary string.\n"); //當前段 if 字元檢查 ，&& 判斷為 真（true） ，就將啟動這部分程式碼，會顯示程式執行錯誤 
            return 1; // 程式結束並回傳錯誤碼 1  
        }
    } 

    // 將二進位字串轉換為十進位
    for (i = 0; i < length; i++)
    {   
        decimal <<= 1; // 使用賦值運算子 (<<=) 讓數值向左位移一位，例如: 0010 ( 十進位 2 ) 移位之後會變為 0100 ( 十進位 4 )，相當於乘以 2 的功效 。 
        decimal |= (binary[i] - '0'); /*  binary[i]會讀取一個字元，並由  - '0' 轉變成數值 ，例如 i=1 (字元) ，轉換後變成十進位數值 1 。
   |=  複合賦值運算子  會先讓  decimal 中的數值與  (binary[i] - '0') 中的數值進行  位元OR運算 ， 並把計算結果賦予  decimal
   簡單來說 會將完成左移一位數值的  decimal 與  binary[i] 中的轉換成數值的數字 ， 兩個加再一起 ， 最後再賦予給 decimal ， 並沿用到下一圈計算得到新數值 ， 直到迴圈最後一圈 ， 就是答案。 
    例如     decimal 原先是 4 ，在左移一位後 變成 8 ，而 binary[i] 是 1 ，也就是 8 + 1  = 9  ， 最終這一圈的 decimal 數值就是 9 ，並沿用給下一圈使用  ， 直到最後一圈 。 
	*/ 
    }   

    printf("The decimal result is: %d\n", decimal);

    return 0; // 程式正常結束
}
